gli use-case devono rispecchiare i termini utilizzati nel glossario: se ho dei sinonimi li cambio in uno dei due documenti

le 'caselle' che definiscono use-case (componi messaggio, cifra messaggio...) possono essere definite a loro volta in use-case piu'
dettagliati, ma non e' obbligatorio

class diagram: se non e' dettagliato allora e' meglio non inserire cose che dipendono dall'implementazione del sistema
               se stiamo gia' facendo delle scelte progettuali, e' troppo nel dettaglio per un diagramma non-dettagliato
               descrittivo, non vincolante
               non deve dipendere dal sistema

agente studente: rappresenta quello che possono fare tutti

come scegliere il 10% dei casi di uso da dettagliare? devono essere rappresentativi dei casi d'uso del sistema, che quindi ne coinvolgano
gli elementi chiave. 
se un caso d'uso è molto semplice, è preferibile una buona descrizione testuale ad un diagramma elementare. 

ci sono due sistemi per fare i casi d'uso dettagliati: la prof. ci fa vedere entrambi, almeno all'inizio. siamo liberi di usare
quello che preferiamo.

i casi d'uso dettagliati sono a grandi linee un elenco di cose che il sistema deve offrire all'utente,
e per ognuno di questi quali sono i casi d'uso utili allo scopo.

il primo stile è completamente testuale. indico alternative facendo una tabella separata che fa riferimento al punto specifico della tabella
"principale" che modella il caso d'uso. posso anche riassumere le azioni del sistema con degli "pseudonomi di metodo", che non è obbligatorio 
rispettare a livello di implementazione. la debolezza di questo stile è che si perde uno sguardo d'insieme e del flusso che effettivamente
ha lo use case.

lo schema che stiamo facendo (creasistemacifratura) è un sequence/activity (più activity)

suggerimento: si prevedano dei casi d'uso a parte per i tool di supporto. questo perchè tali strumenti potrebbero essere sviluppati ulteriorm.
in seguito (non lo faremo). in generale la modularizzazione del sw può già cominciare dalla fase di progettazione. inoltre non lavoreremo su
tutti i casi d'uso, quindi dividerli e modulizzarli può tornare utile nel momento in cui sceglieremo quali sviluppare (concordandoli con i prof)

non vogliamo creare un sistema intelligente per risolvere problemi di crittografia, solamente un sistema per aiutare gli analisti che li risolvono!
una persona che fa crittoanalisi tipicamente ha davanti il testo cifrato che vuole decifrare, e di solito si suggerisce di inserire sotto le parole
cifrate il testo in chiaro, o quantomeno i pezzi che sinora è riuscito a decifrare.

esempio:
wrhgw euhuh
c p i ron a

voglio anche mantenere un albero delle ipotesi, a cui però non devo necessariamente ad ogni passo aggiungere ipotesi, ma potrei volere anche magari
poter riconsiderare, modificare e rimuovere alcune di esse. inoltre ad ogni passo può opzionalmente richiedere delle analisi statistiche.
questi i passi che l'analista compirà:

1. pensare/analizzare (eventualmente con strumenti di supporto statistici)
2. aggiornare l'ipotesi, il che modifica il mio albero. questo è simile a fare una mossa in un gioco. oppure faccio una UNDO.

si noti che una sola ipotesi può modificare più di un'assegnazione lettera-lettera. l'albero delle ipotesi è gestibile come uno stack. se per caso 
l'analista giunge ad un'ipotesi che aveva già formulato in precedenza, potrei volerlo avvisare di tale fatto: da qui l'esigenza di un albero delle ipotesi.
non è detto che avere effettivamente una visualizzazione grafica di tale albero sia necessario, ma è un'opzione da considerare. magari posso tenergli uno storico
delle ultime 2-3 cose che ha fatto. è anche utile che venga data all'analista l'opzione di poter immettere nel sistema le sue motivazioni per aver riconsiderato
o scartato un'ipotesi.

modello di dominio: fa parte della modellazione del business. bisogna fare attenzione a non pensare ancora in oop. quello per gli UC1 
sarà concordato con quello che fa la prof, quello per gli UC2 invece lo faremo noi di nostra sponte
caratteristica del modello di dominio è che le classi hanno solo attributi e non metodi. è facile dando attributi alle classi che 
mi renda conto che alcune di questi attributi possono essere naturalmente promossi a classe. ad esempio scrivendo gli attributi 
di messaggio inserisco "mittente" e "destinatario", che mi rendo conto essere due attori e quindi assolutamente da inserire anche
come classi. a questo punto mi rendo conto che è superfluo tenere "mittente" e "destinatario" come attributi nella classe
"messaggio", e mi limito a dire che esiste una associazione tra queste classi. in tale associazione è necessario indicare la cardinalità
ed è opzionale scrivere il ruolo delle classi all'interno di questa. ricordiamo anche quindi che mittente e destinatario sono 
generalizzazioni di studente/utente: forse vorrei allora inserire l'attributo "nome" nella classe studente, e farlo ereditare a mittente
e destinatario

contratti tra le classi: precondizioni e postcondizioni sugli oggetti del modello di dominio. è il momento in cui ci si rende conto anche se 
abbiamo modellato le classi corrette, se ce ne sono troppe poche. sono utili a rendere modulare la progettazione, in quanto potremo smettere di pensare
ai casi d'uso facendo riferimento a precondizioni e postcondizioni. 
si faccia riferimento all'elenco operazioni dell'UC1: segue il metodo con cui si scrivono. ogni metodo "teorico" definito negli UC dettagliati viene
inserito e riportato, facendo riferimento all'UC di provenienza. vanno inserite poi anche quelle dagli UC non dettagliati, che vanno
dedotte dalla descrizione testuale. vanno escluse le nozioni di navigazione UI. sarebbe il momento di cominciare a inserire nel modello di dominio
alcuni concetti che vengono fuori in questo momento, se necessario. si noti che la differenza tra glossario e modello di dominio
è che il glossario non sottolinea le relazioni tra i concetti.

ciò che è segnato in giallo è quello che non è presente nel modello di dominio e probabilmente andrà in qualche modo inserito
 

apri (apro ed eventualmente posso modificare)
visualizza (apro in sola lettura)

per il messaggio: 1 solo oggetto e una sola tabella useremo 2 interfacce diverse per esporre campi e comportamenti diversi al mittente e ricevente. Con 2 interfacce ci permette in un futuro di cambiare l'implementazione e usare 2 oggetti separati

certe connessioni si possono fare usando la lazy connection: invece di avrere tutto l'oggetto 'studente' dentro all'oggetto 'messaggio' ne tengo soltanto il suo id


glossario
use case
use case dettagliato (20%)
modello di dominio
contratti
modello di progetto
entity relationship
sequence dettagliato


