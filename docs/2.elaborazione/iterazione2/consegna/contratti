Operazione:     getFrequency(messaggio)
Riferimenti:    uc: AnalisiDellFrequenze
Precondizioni:  la spia è all'interno di una Sessione
Postcondizioni: restituisce una tabella che rappresenta la percentuale delle occorrenze dei caratteri all'interno del messaggio cifrato

Operazione:     getFrequency(lingua)
Riferimenti:    uc: AnalisiDellFrequenze
Precondizioni:  la spia è all'interno di una Sessione
Postcondizioni: restituisce una tabella che rappresenta la percentuale delle occorrenze delle lettere nella lingua del messaggio
             
Operazione:     faiAssunzione(map)
Riferimenti:    uc: AggiornaIpotesiLavoro
Precondizioni:  la spia è all'interno di una Sessione
Postcondizioni: viene aggiunta una Ipotesi all'Albero delle Ipotesi

Operazione:     undo(message)
Riferimenti:    AggiornaIpotesiDiLavoro
Precondizioni:  albero delle ipotesi non vuoto -> deve esistere una ipotesi precedente a quella corrente
Postcondizioni: l'Ipotesi precedente all'ultima Mossa diventa l'Ipotesi corrente. Il messaggio dell'Ipotesi lasciata diventa "message"
               
Operazione:     mostraSoluzioni(st1, st2)
Riferimenti:    uc: GestisciSoluzioni
Precondizioni:  Studente st identificato, Studenti st1 e st2 esistenti 
Postcondizioni: vengono mostrate le Soluzioni dello Studente di cui st1 o st2 erano o mittente o destinatario 

Operazione:     salvaSoluzione()
Riferimenti:    uc: SalvaSoluzione
Precondizioni:  Studente st identificato, la Spia sta svolgendo una Sessione s
Postcondizioni: viene salvata una nuova Soluzione sol, la cui mappatura viene ricavata dall'Albero delle Ipotesi della Sessione s

Operazione:     caricaSoluzione(sol)
Riferimenti:    uc: CaricaSoluzione
Precondizioni:  Studente st identificato, sol è una soluzione, l'utente sta effettuando una Sessione 
Postcondizioni: applica la Soluzione sol al messaggio che la Spia sta violando

Operazione:     eliminaSoluzione(sol)
Riferimenti:    uc: EliminaSoluzione
Precondizioni:  Studente st identificato, sol è una soluzione salvata da st
Postcondizioni: viene eliminata la Soluzione sol

Operazione:     creaSessione(msg)
Riferimenti:    uc: CreaSessione
Precondizioni:  Studente st identificato 
Postcondizioni: viene inizializzata una Sessione

Operazione:     salvaSessione()
Riferimenti:    uc: SalvaSessione
Precondizioni:  la Sessione s è stata creata ed è in corso
Postcondizioni: la Sessione corrente viene salvata

Operazione:     mostraSessioni()     
Riferimenti:    uc: GestisciSessioni
Precondizioni:  Studente st identificato 
Postcondizioni: ritorna la lista delle sessioni create dal Studente st

Operazione:     caricaSessione(sessione)
Riferimenti:    uc: CaricaSessione
Precondizioni:  Studente st identificato, sessione è una Sessione creata dallo studente st
Postcondizioni: viene riaperta la Sessione sessione

Operazione:     eliminaSessione(sessione)
Riferimenti:    uc: GestisciSessioni
Precondizioni:  Studente st identificato, sessione è una Sessione creata dallo studente st
Postcondizioni: la Sessione sessione viene eliminata 
